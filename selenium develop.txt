value 值定义:javascript{"1:"+storedVars["first"].toUpperCase()}

新建firefox配置:
firefox -p
新建成功之后安装插件
ProfilesIni allProfiles = new ProfilesIni();
FirefoxProfile profile = allProfiles.getProfile("selenium");
// FirefoxProfile profile = allProfiles.getProfile("default");
driver = new FirefoxDriver(profile);
		
		
 List<WebElement>
 element=driver.findElements(By.xpath(script_content2));
 for(WebElement e:element)
 {
 System.out.println(e.getAttribute("wrap"));
 }
 System.exit(0);
 driver.findElement(By.xpath(script_content)).click();

if (!(driver.findElement(By.xpath(script_content2)).isDisplayed())) {
	System.out.println("Element is not displayed!");
}

JavascriptExecutor j2 = (JavascriptExecutor) driver;
j2.executeScript("$(\"pre.CodeMirror-line > span\").append(\"<span>a</span>\")");
		j2.executeScript("alert(document.getElementsByClassName(\"CodeMirror-line\"))");

j2.executeScript(
		"$(\"pre[class=\" CodeMirror-line \"]\").show()");

j2.executeScript(
		"$(\"div[style='overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 4px;']\").val(\"Dolly Duck\")");

j2.executeScript("document.getElementsByTagName('textarea')[0].innerText='1232'");
j2.executeScript("document.getElementsByTagName('textarea')[1].style=\"\"");
j2.executeScript("document.getElementsByTagName('textarea')[2].style=\"\"");

j2.executeScript("document.getElementsByTagName('textarea')[0].innerText='1232'");
j2.executeScript("document.getElementsByTagName('textarea')[1].innerText='1232'");
j2.executeScript("document.getElementsByTagName('textarea')[2].innerText='6666666'");
		
		
System.setProperty("webdriver.firefox.bin","D:/Program Files/Mozilla Firefox/firefox.exe"); 　　　　//指定firefox的安装路径
　

启动firefox时加载插件：
File file = new File("files/firebug-2.0.7-fx.xpi");
FirefoxProfile profile = new FirefoxProfile();
try {
    profile.addExtension(file);
} catch (IOException e) {
    e.printStackTrace();
}
profile.setPreference("extensions.firebug.currentVersion", "2.0.7");
//active firebug extensions
profile.setPreference("extensions.firebug.allPagesActivation", "on");    

启动firefox时设置profile：

FirefoxProfile profile = new FirefoxProfile();
//设置代理参数
profile.setPreference("network.proxy.type", 1);
profile.setPreference("network.proxy.http", proxyIp);
profile.setPreference("network.proxy.http_port", proxyPort);

//设置默认下载路径
profile.setPreference("browser.download.folderList", 2);
profile.setPreference("browser.download.dir", "D:\\");

启动本机器的firefox配置：
ProfilesIni pi = new ProfilesIni();
FirefoxProfile profile = pi.getProfile("default");

启动firefox插件：
//设置firebug版本
profile.setPreference("extensions.firebug.currentVersion", "1.9.0");
//自动打开firebug
profile.setPreference("extensions.firebug.allPagesActivation", "on");
//设置启用firebug网络面板
profile.setPreference("extensions.firebug.net.enableSites", true);
//设置启用firebugcookies面板
profile.setPreference("extensions.firebug.cookies.enableSites", true);

启动chrome浏览器：
System.setProperty("webdriver.chrome.driver", "files\\chromedriver.exe");　　//指定驱动路径
WebDriver driver = new ChromeDriver();
#WebDriver driver = new ChromeDriver(options);

File file = new File ("files\\youtube.crx");
ChromeOptions options = new ChromeOptions();
options.addExtensions(file);


启动IE浏览器：

System.setProperty("webdriver.ie.driver", "files\\IEDriverServer.exe");
DesiredCapabilities dc = DesiredCapabilities.internetExplorer();
dc.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);

//IE默认启动保护模式，要么手动在浏览器的设置中关闭保护模式，要么在代码中加上这一句，即可
dc.setCapability("ignoreProtectedModeSettings", true);
WebDriver driver = new InternetExplorerDriver(dc);


		
